import { OpenAI } from 'openai'
import { OPENAI_API_KEY } from '@/lib/env'
import { OPENAI_MODELS } from '@/lib/openai-service'
import { CVSettings } from '@/types'

export interface CVPersonalizationOptions {
  cvData: CVSettings
  jobDescription: string
  positionSummary?: string
}

export class CVPersonalizationService {
  /**
   * Personalize a CV for a specific job position using the original prompt format
   */
  static async personalizeCV(options: CVPersonalizationOptions): Promise<CVSettings> {
    const { cvData, jobDescription, positionSummary: _positionSummary } = options

    const openai = new OpenAI({
      apiKey: OPENAI_API_KEY,
    })

    console.log(`CVPersonalizationService - Starting CV personalization with ${OPENAI_MODELS.LATEST_MINI}`)

    let completion
    try {
      completion = await openai.chat.completions.parse({
        model: OPENAI_MODELS.LATEST_MINI,
        messages: [
          {
            role: 'user',
            content: `You are an elite HR specializing at getting people their dream jobs. A candidate sent you a cv.`,
          },
          {
            role: 'user',
            content: JSON.stringify(cvData),
          },
          {
            role: 'user',
            content: `
            The candidate is applying for a position: ${jobDescription}.

            Improve the CV to match this position. Keep the CV approximately the same length as the original.
            Focus on adjusting existing content rather than adding lots of new content.
            Keep all existing company names and workplace information exactly as they are - do not modify, hide, or replace them.
            `,
          },
          {
            role: 'user',
            content: 'Please make sure to keep it in the json format.',
          },
        ],
        response_format: {
          type: 'json_object',
        },
      })
      console.log('CVPersonalizationService - CV personalization completed')
    } catch (e) {
      console.error('CVPersonalizationService - OpenAI API call failed:', e)
      throw new Error(`Failed to personalize CV: ${e instanceof Error ? e.message : 'Unknown OpenAI API error'}`)
    }

    if (!completion.choices[0].message.content) {
      console.error('CVPersonalizationService - No content from OpenAI')
      throw new Error('No CV generated by OpenAI')
    }

    let personalizedCV: CVSettings
    try {
      personalizedCV = JSON.parse(completion.choices[0].message.content)
    } catch (e) {
      console.error('CVPersonalizationService - Failed to parse OpenAI response:', e)
      throw new Error(`Failed to parse CV from OpenAI response: ${e instanceof Error ? e.message : 'Invalid JSON from OpenAI'}`)
    }

    return personalizedCV
  }
}