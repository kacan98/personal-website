import OpenAI from 'openai'
import { zodResponseFormat } from 'openai/helpers/zod.mjs'
import { z } from 'zod'

const PositionSummarizeParams = z.object({
  description: z.string().min(20, 'Description too short'),
})

export type PositionSummarizeParams = z.infer<typeof PositionSummarizeParams>

const PositionSummarizeResponse = z.object({
  summary: z.string(),
  companyName: z.string().nullable().optional(),
  languagePostIsWrittineIn: z.string(),
})

export type PositionSummarizeResponse = z.infer<
  typeof PositionSummarizeResponse
>

export const runtime = 'nodejs';

export async function POST(req: Request): Promise<Response> {
  try {
    console.log('POST /api/position-summary - Starting request')

    // Parse request body
    let body: PositionSummarizeParams
    try {
      body = await req.json()
      console.log('POST /api/position-summary - Request body parsed')
    } catch (e) {
      console.error('POST /api/position-summary - Failed to parse request body:', e)
      return new Response(JSON.stringify({ error: 'Invalid JSON in request body', details: e instanceof Error ? e.message : 'Unknown parsing error' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    // Validate request
    try {
      PositionSummarizeParams.parse(body)
      console.log('POST /api/position-summary - Request validation passed')
    } catch (e) {
      console.error('POST /api/position-summary - Request validation failed:', e)
      return new Response(JSON.stringify({ error: 'Invalid request parameters', details: e instanceof Error ? e.message : 'Validation failed' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    // Check API key
    if (!process.env.OPENAI_API_KEY) {
      console.error('POST /api/position-summary - OpenAI API key not configured')
      return new Response(JSON.stringify({ error: 'OpenAI API key not configured' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    })

    console.log('POST /api/position-summary - About to call OpenAI API')
    let completion
    try {
      completion = await openai.chat.completions.parse({
        model: 'gpt-5-mini',
        messages: [
          {
            role: 'user',
            content: `You are a hiring manager for this position:`,
          },
          {
            role: 'user',
            content: body.description,
          },
          {
            role: 'user',
            content:
              'Please take out what is the most imporatant about the candidate you are going to hire?',
          },
          {
            role: 'user',
            content:
              'Be brief and to the point. Return it in a json object with the summary and the company name if available.',
          },
        ],
        response_format: zodResponseFormat(PositionSummarizeResponse, 'transformed_cv'),
      })
      console.log('POST /api/position-summary - OpenAI API call completed')
    } catch (e) {
      console.error('POST /api/position-summary - OpenAI API call failed:', e)
      return new Response(JSON.stringify({ error: 'Failed to call OpenAI API', details: e instanceof Error ? e.message : 'Unknown API error' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    const parsed = completion.choices[0].message.parsed
    if (!parsed) {
      console.error('POST /api/position-summary - No parsed result from OpenAI')
      return new Response(JSON.stringify({ error: 'No summary generated by OpenAI' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    const response: PositionSummarizeResponse = {
      summary: parsed.summary,
      companyName: parsed.companyName,
      languagePostIsWrittineIn: parsed.languagePostIsWrittineIn
    }

    return new Response(JSON.stringify(response), {
      headers: {
        'Content-Type': 'application/json',
      },
    })
  } catch (e: any) {
    console.error('POST /api/position-summary - Unexpected error:', e)
    return new Response(JSON.stringify({ error: 'Internal server error', details: e.message }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    })
  }
}
