import OpenAI from 'openai'
import { zodResponseFormat } from 'openai/helpers/zod.mjs'
import { JobCvIntersectionParams, JobCVIntersectionResponse } from './model'
import { checkAuthFromRequest } from '@/lib/auth-middleware'
import { IS_PRODUCTION, OPENAI_API_KEY } from '@/lib/env'
import { OPENAI_MODELS } from '@/lib/openai-service'

export const runtime = 'nodejs';

export async function POST(req: Request): Promise<Response> {
  try {
    // Check authentication when required
    if (IS_PRODUCTION) {
      const authResult = await checkAuthFromRequest(req)
      if (!authResult.authenticated) {
        console.log('POST /api/job-cv-intersection - Authentication required')
        return new Response(JSON.stringify({ error: 'Authentication required for job intersection analysis' }), {
          status: 401,
          headers: { 'Content-Type': 'application/json' }
        })
      }
      console.log('POST /api/job-cv-intersection - Authentication verified')
    }

    // Parse request body
    let body: JobCvIntersectionParams
    try {
      body = await req.json()
    } catch (e) {
      console.error('POST /api/job-cv-intersection - Failed to parse request body:', e)
      return new Response(JSON.stringify({ error: 'Invalid JSON in request body', details: e instanceof Error ? e.message : 'Unknown parsing error' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    // Validate required fields
    if (!body.jobDescription || !body.candidate) {
      return new Response(JSON.stringify({ error: 'Missing required fields: jobDescription and candidate are required' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    // Check API key
    if (!OPENAI_API_KEY) {
      console.error('POST /api/job-cv-intersection - OpenAI API key not configured')
      return new Response(JSON.stringify({ error: 'OpenAI API key not configured' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    const openai = new OpenAI({
      apiKey: OPENAI_API_KEY,
    })

    let response
    try {
      response = await openai.chat.completions.parse({
        model: OPENAI_MODELS.LATEST_MINI,
        messages: [
          {
            role: 'user',
            content: `You are a hiring manager for this position:`,
          },
          {
            role: 'user',
            content: body.jobDescription,
          },
          {
            role: 'user',
            content: 'And here is a candidate:',
          },
          {
            role: 'user',
            content: JSON.stringify(body.candidate),
          },
          {
            role: 'user',
            content: `What do you think about this candidate?
            Say your opinion, what is missing in the CV? What is good about the CV?
            Rate the candidate from 1 to 10.

            Make sure to return this in a json format as described.

            Be brief and to the point. Lists are good.
            `,
          },
        ],
        response_format: zodResponseFormat(JobCVIntersectionResponse, 'transformed_cv'),
      })
    } catch (e) {
      console.error('POST /api/job-cv-intersection - OpenAI API call failed:', e)
      return new Response(JSON.stringify({ error: 'Failed to call OpenAI API', details: e instanceof Error ? e.message : 'Unknown API error' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    const parsed = response.choices[0].message.parsed
    if (!parsed) {
      console.error('POST /api/job-cv-intersection - No parsed result from OpenAI')
      return new Response(JSON.stringify({ error: 'No analysis generated by OpenAI' }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      })
    }

    return new Response(JSON.stringify(parsed), {
      status: 200,
      headers: {
        'Content-Type': 'application/json',
      },
    })

  } catch (e: any) {
    console.error('POST /api/job-cv-intersection - Unexpected error:', e)
    return new Response(JSON.stringify({ error: 'Internal server error', details: e.message }), {
      status: 500,
      headers: { 'Content-Type': 'application/json' }
    })
  }
}
